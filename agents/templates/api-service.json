{
  "templateType": "api-service",
  "description": "后端 API 服务项目结构模板",
  "version": "1.0.0",
  
  "directoryStructure": {
    "required": [
      "src/",
      "src/controllers/",
      "src/services/",
      "src/models/",
      "src/routes/",
      "src/middleware/",
      "src/utils/",
      "src/config/",
      "tests/",
      "docs/"
    ],
    "optional": [
      "src/validators/",
      "src/decorators/",
      "src/types/",
      "src/database/",
      "scripts/",
      "migrations/"
    ],
    "forbidden": [
      "src/controller/",
      "src/service/",
      "src/model/",
      "src/route/",
      "controllers/",
      "services/"
    ]
  },

  "fileNamingRules": {
    "controllers": {
      "pattern": "PascalCase (with suffix)",
      "extensions": [".js", ".ts"],
      "examples": ["UserController.js", "AuthController.ts"],
      "suffix": "Controller"
    },
    "services": {
      "pattern": "PascalCase (with suffix)",
      "extensions": [".js", ".ts"],
      "examples": ["UserService.js", "EmailService.ts"],
      "suffix": "Service"
    },
    "models": {
      "pattern": "PascalCase",
      "extensions": [".js", ".ts"],
      "examples": ["User.js", "Product.ts"],
      "structure": "单数形式，表示实体"
    },
    "routes": {
      "pattern": "camelCase (with suffix)",
      "extensions": [".js", ".ts"],
      "examples": ["userRoutes.js", "authRoutes.ts"],
      "suffix": "Routes"
    },
    "middleware": {
      "pattern": "camelCase",
      "extensions": [".js", ".ts"],
      "examples": ["authMiddleware.js", "corsMiddleware.ts"]
    },
    "utils": {
      "pattern": "camelCase",
      "extensions": [".js", ".ts"],
      "examples": ["logger.js", "passwordHash.ts"]
    },
    "validators": {
      "pattern": "camelCase (with suffix)",
      "extensions": [".js", ".ts"],
      "examples": ["userValidator.js", "authValidator.ts"],
      "suffix": "Validator"
    }
  },

  "structureRules": [
    {
      "rule": "mvc-separation",
      "description": "严格按照 MVC 模式分离关注点",
      "violation": "在 Controller 中写业务逻辑",
      "correct": "Controller 只处理请求响应，业务逻辑放在 Service"
    },
    {
      "rule": "routes-organization",
      "description": "路由按功能模块组织，统一在 src/routes/ 目录",
      "violation": "路由配置散落在各处",
      "correct": "src/routes/userRoutes.js, src/routes/index.js"
    },
    {
      "rule": "middleware-reusability",
      "description": "中间件独立可复用，统一在 src/middleware/ 目录",
      "violation": "在路由中内联写中间件逻辑",
      "correct": "独立的中间件文件"
    },
    {
      "rule": "config-centralization",
      "description": "配置统一管理在 src/config/ 目录",
      "violation": "配置散落在各个文件中",
      "correct": "src/config/database.js, src/config/server.js"
    }
  ],

  "exampleFiles": {
    "src/controllers/UserController.js": {
      "content": "const UserService = require('../services/UserService');\n\nclass UserController {\n  async getUser(req, res) {\n    try {\n      const { id } = req.params;\n      const user = await UserService.getUserById(id);\n      res.json({ success: true, data: user });\n    } catch (error) {\n      res.status(500).json({ success: false, error: error.message });\n    }\n  }\n  \n  async createUser(req, res) {\n    try {\n      const userData = req.body;\n      const user = await UserService.createUser(userData);\n      res.status(201).json({ success: true, data: user });\n    } catch (error) {\n      res.status(400).json({ success: false, error: error.message });\n    }\n  }\n}\n\nmodule.exports = new UserController();",
      "description": "API 控制器示例文件"
    },
    "src/services/UserService.js": {
      "content": "const User = require('../models/User');\n\nclass UserService {\n  async getUserById(id) {\n    const user = await User.findById(id);\n    if (!user) {\n      throw new Error('用户不存在');\n    }\n    return user;\n  }\n  \n  async createUser(userData) {\n    // 业务逻辑验证\n    if (!userData.email) {\n      throw new Error('邮箱不能为空');\n    }\n    \n    const existingUser = await User.findOne({ email: userData.email });\n    if (existingUser) {\n      throw new Error('邮箱已存在');\n    }\n    \n    return await User.create(userData);\n  }\n}\n\nmodule.exports = new UserService();",
      "description": "业务服务示例文件"
    },
    "src/routes/userRoutes.js": {
      "content": "const express = require('express');\nconst UserController = require('../controllers/UserController');\nconst authMiddleware = require('../middleware/authMiddleware');\n\nconst router = express.Router();\n\n// GET /api/users/:id\nrouter.get('/:id', authMiddleware, UserController.getUser);\n\n// POST /api/users\nrouter.post('/', UserController.createUser);\n\nmodule.exports = router;",
      "description": "路由配置示例文件"
    },
    "src/middleware/authMiddleware.js": {
      "content": "const jwt = require('jsonwebtoken');\n\nconst authMiddleware = (req, res, next) => {\n  const token = req.header('Authorization')?.replace('Bearer ', '');\n  \n  if (!token) {\n    return res.status(401).json({ error: '缺少认证令牌' });\n  }\n  \n  try {\n    const decoded = jwt.verify(token, process.env.JWT_SECRET);\n    req.user = decoded;\n    next();\n  } catch (error) {\n    res.status(401).json({ error: '无效的令牌' });\n  }\n};\n\nmodule.exports = authMiddleware;",
      "description": "中间件示例文件"
    }
  },

  "claudeCodeReminders": {
    "strictMode": true,
    "autoValidation": true,
    "reminders": [
      "Controller 使用 PascalCase + Controller 后缀命名",
      "Service 使用 PascalCase + Service 后缀命名",
      "Model 使用 PascalCase 单数形式命名",
      "Routes 使用 camelCase + Routes 后缀命名",
      "严格遵循 MVC 分层架构，业务逻辑放在 Service 层",
      "中间件独立可复用，统一放在 middleware 目录",
      "配置文件统一放在 config 目录"
    ]
  }
}