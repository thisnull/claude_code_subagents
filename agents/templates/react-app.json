{
  "templateType": "react-app",
  "description": "React 单页应用项目结构模板",
  "version": "1.0.0",
  
  "directoryStructure": {
    "required": [
      "src/",
      "src/components/",
      "src/pages/",
      "src/hooks/",
      "src/utils/",
      "src/api/",
      "src/assets/",
      "src/styles/",
      "public/",
      "tests/"
    ],
    "optional": [
      "src/contexts/",
      "src/store/",
      "src/types/",
      "docs/"
    ],
    "forbidden": [
      "src/component/",
      "src/page/",
      "src/util/",
      "components/",
      "pages/"
    ]
  },

  "fileNamingRules": {
    "components": {
      "pattern": "PascalCase",
      "extensions": [".jsx", ".tsx"],
      "examples": ["UserCard.jsx", "LoginForm.tsx"],
      "structure": "可以使用文件夹组织: components/UserCard/UserCard.jsx"
    },
    "pages": {
      "pattern": "PascalCase",
      "extensions": [".jsx", ".tsx"],
      "examples": ["HomePage.jsx", "UserProfile.tsx"],
      "structure": "可以使用文件夹组织: pages/User/Profile.jsx"
    },
    "hooks": {
      "pattern": "camelCase (use prefix)",
      "extensions": [".js", ".ts"],
      "examples": ["useAuth.js", "useLocalStorage.ts"],
      "prefix": "use"
    },
    "utils": {
      "pattern": "camelCase",
      "extensions": [".js", ".ts"],
      "examples": ["formatDate.js", "apiHelper.ts"]
    },
    "api": {
      "pattern": "camelCase (with suffix)",
      "extensions": [".js", ".ts"],
      "examples": ["userApi.js", "authApi.ts"],
      "suffix": "Api"
    },
    "styles": {
      "pattern": "kebab-case or camelCase",
      "extensions": [".css", ".scss", ".module.css"],
      "examples": ["global.css", "user-card.module.css"]
    }
  },

  "structureRules": [
    {
      "rule": "components-in-src",
      "description": "所有 React 组件必须放在 src/components/ 目录下",
      "violation": "在 src/ 根目录或其他位置创建组件文件",
      "correct": "src/components/ComponentName.jsx"
    },
    {
      "rule": "pages-structure",
      "description": "页面组件放在 src/pages/ 目录，可以按功能模块分子目录",
      "violation": "页面文件散落在各处",
      "correct": "src/pages/Auth/Login.jsx"
    },
    {
      "rule": "hooks-naming",
      "description": "自定义 Hook 必须以 'use' 开头",
      "violation": "authHook.js, userHook.js",
      "correct": "useAuth.js, useUser.js"
    },
    {
      "rule": "api-separation",
      "description": "API 调用逻辑独立放在 src/api/ 目录",
      "violation": "在组件中直接写 fetch 调用",
      "correct": "src/api/userApi.js"
    },
    {
      "rule": "no-deep-nesting",
      "description": "目录嵌套不超过 4 层",
      "violation": "src/components/User/Profile/Avatar/Image/Icon.jsx",
      "correct": "src/components/UserAvatar.jsx"
    }
  ],

  "exampleFiles": {
    "src/components/Example.jsx": {
      "content": "import React from 'react';\n\nconst Example = () => {\n  return (\n    <div className=\"example\">\n      <h1>示例组件</h1>\n    </div>\n  );\n};\n\nexport default Example;",
      "description": "React 组件示例文件"
    },
    "src/hooks/useExample.js": {
      "content": "import { useState, useEffect } from 'react';\n\nexport const useExample = () => {\n  const [data, setData] = useState(null);\n  \n  useEffect(() => {\n    // Hook 逻辑\n  }, []);\n  \n  return { data };\n};",
      "description": "自定义 Hook 示例文件"
    },
    "src/utils/formatDate.js": {
      "content": "export const formatDate = (date) => {\n  return new Intl.DateTimeFormat('zh-CN').format(date);\n};",
      "description": "工具函数示例文件"
    },
    "src/api/userApi.js": {
      "content": "const BASE_URL = '/api/users';\n\nexport const userApi = {\n  getUser: async (id) => {\n    const response = await fetch(`${BASE_URL}/${id}`);\n    return response.json();\n  },\n  \n  createUser: async (userData) => {\n    const response = await fetch(BASE_URL, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(userData)\n    });\n    return response.json();\n  }\n};",
      "description": "API 调用函数示例文件"
    }
  },

  "claudeCodeReminders": {
    "strictMode": true,
    "autoValidation": true,
    "reminders": [
      "React 组件必须使用 PascalCase 命名并放在 src/components/",
      "页面组件放在 src/pages/，可以按模块分组",
      "自定义 Hook 必须以 use 开头并放在 src/hooks/",
      "工具函数使用 camelCase 命名并放在 src/utils/",
      "API 调用封装在 src/api/ 目录，文件名以 Api 结尾",
      "样式文件放在 src/styles/ 或组件同级目录"
    ]
  },

  "commonViolations": [
    {
      "violation": "在根目录创建 Component.jsx",
      "fix": "移动到 src/components/Component.jsx"
    },
    {
      "violation": "Hook 命名为 authHook.js",
      "fix": "重命名为 useAuth.js"
    },
    {
      "violation": "在组件中直接写 API 调用",
      "fix": "提取到 src/api/ 目录的专门文件中"
    },
    {
      "violation": "使用 camelCase 命名组件",
      "fix": "改为 PascalCase 命名"
    }
  ]
}